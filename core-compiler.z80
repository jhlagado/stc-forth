; [compile]   ( -- ; <string> )
; Compile the next immediate word into CODE dictionary.
CODE "[compile]",0,bracCompile
    call tick
    call comma
    ret

; compile     ( -- )
; Compile the next address in colon list to CODE dictionary.
CODE 'compile',0,compile
    call rfrom
    call dup
    call at
    call callc                              ;compile call to address
    _push 3
    call plus
    ld HL,BC
    call drop
    jp (HL)

; literal     ( w -- )
; Compile tos to CODE dictionary as an integer literal.
CODE 'literal',IMMED,literal
    _compile dolit
    call comma
    ret

; CREATE ( -- ; <string> )
; Compile a new array entry without allocating CODE space.
CODE "create",0,create             
    _fetch here                               ; &here
    _fetch latest                           ; here latest
    call comma                              ; write value current value of latest to link field (inc here by 2)
    _store latest                           ; store header to latest 
    _push 0                                 ; 0
    call ccomma                             ; write 0 to flags field (inc here by 1)
    call bl                                 ; delim
    call word                               ; read word token into name field at here
    call cat                                ; get name length
    _onep                               ; inc by 1 for length byte
    call allot                              ; allot len+1
    _push jp_opcode 
    call ccomma                             ; compile default behavious
    _push create1 
    call comma                              ; i.e. push addr of data area
    ret
create1:
    call rfrom                              ; push onto stack
    ret
    
; hidden addr --
; hides word pointed to by addr
hidden:
    _cellp                                  ; pflags
    call dup                                ; pflags pflags
    call cat                                ; pflags flags
    _push HIDE                              ; pflags flags HIDE
    call xorr                               ; pflags flags^HIDE
    call swap                               ; flags^HIDE pflags
    call cstore
    ret

CODE ":",0,colon
    call create                             ; create the dictionary entry / header
    _push -3
    call allot                              ; erase jump instruction left by create 
    _fetch latest
    call hidden                             ; make the word hidden
    call rbrac                              ; go into compile mode.
    ret                                     

; ( -- )
; immediately enter interpretation state. 
CODE "[",IMMED,lbrac
	ld HL, FALSE
	ld (VAR_STATE), HL	; Set STATE to 0.
    ret

; ( -- )
; enter compilation state. 
CODE "]",0,rbrac
	ld HL, TRUE
	ld (VAR_STATE), HL	; Set STATE to 1.
    ret
    
; ( -- )
; immediately finish definition and leave compilation state.
; allow defintion to be visible in dictionary
CODE ";",IMMED,semicolon
    _push RET_OPCODE 
    call ccomma                             ; compile ret
    _fetch latest                           ; get latest defined word
    call hidden                             ; toggle hidden flag -- unhide 
    call lbrac                              ; go back to immediate mode.
    ret                                

; IMMEDIATE   --   
; make last definition immediate
CODE "immediate",0,immediate
    _fetch latest
    call cellp
    call cat
    _push IMMED
    call orr
    call swap
    call cstore
    ret

CODE ":noname",0,colonNoName
    _fetch here                             ; TOS = here
    call rbrac                              ; go into compile mode.
    ret                                     ; return from the function.

CODE "does>", IMMED, does                   ; --
    _compile xdoes                          ; compile two calls 
    _compile rfrom                          ; address of body of created word                            
    ret

xdoes:                                      ; --
    call rfrom                              ; TOS = ptr to body after does> word
    _fetch latest                           ; ptr to created word
    call getBody                            
    _push call_opcode
    call over
    call cstore
    call onep
    call store                              ; rewrite with address of body after does>
    ret                                     ; return to caller of caller (terminate caller)

; NFA>LFA   nfa -- lfa    
; name adr -> link field
;   4 - ;
CODE "NFA>LFA",0,NFATOLFA
    _onem
    _onem
    _onem
    _onem
    ret

; NFA>CFA   nfa -- cfa    name adr -> code field
;   COUNT 7F AND + ;       mask off 'smudge' bit
CODE "NFA>CFA",0,NFATOCFA
    call dup
    call cat
    _onep                               ; skip over len
    call plus
    ret

; >body     ( ptr -- ptr' )
CODE ">body",0,toBody
getBody:                                        
    _cellp                              ; skip over backlink
    _onep                               ; skip over flags
    ; TODO: replace rest with jump to NFATOCFA
    call dup
    call cat
    _onep                               ; skip over len
    call plus
    ret

CODE "'",0,tick
    call bl
    call word
    call findx
    call drop
    call isZero
    ret z
    _pushString "?" 
    call abort
    ret

CODE "[']",IMMED,bracTick
    call tick               ; get xt of 'xxx'
    call literal
    ret

; ( "<spaces>name" -- )
code "defer",0,defer
    call create
    _compile abort
    call does
    call at
    call execute
    ret

; ( xt2 xt1 -- )
code "defer!",0,deferstore
    call toBody
    call store
    ret

; ( xt1 -- xt2 )
code "defer@",0,deferAt
    call toBody
    call at
    ret

; ( xt "<spaces>name" -- )
CODE "is",IMMED,is
    _fetch state 
    call isZero
    jr z,is1
    _compile bracTick
    _push deferStore
    call comma
    ret
is1:
    _push deferStore
    ret

