; FIND   c-addr -- c-addr 0   if not found
;                  xt     1   if immediate
;                  xt    -1   if normal
CODE "find",0,find
    _fetch latest
find1:
    call LFAtoNFA   
    call twoDup
    call over
    call cAt
    _charPlus
    call stringEQ
    call dup
    call isZero
    jr z,find2
    call drop
    call NFAtoLFA
    call at
    call dup
find2:
    call isZero
    jr nz,find1
    call dup
    call isZero
    ret z
    call nip
    call dup
    call NFAtoBody
    call swap
    call immedq
    call isZero
    jr z,find3
    _push -1
    ret
find3:
    _push 1
    ret

; ( ptr len -- xt result )
CODE "findx",0,findx
    call findWord
    _push 0
    ret

; non-standard findWord TODO: extend its return to include IMMED flag
; ( ptr len -- xt )
CODE "findWord",0,findWord                                        
    _fetch latest                       ; ptr len headptr
findWord1:
    call dup
    call isZero
    jr z,findWord4                          ; NULL pointer?  (end of the linked list)
    call dup                            ; ptr len headptr headptr
    inc BC
    inc BC                              ; ptr len headptr flagsPtr
    ld A,(BC)                           ; A = flags
    bit 7,A                             ; test HIDDEN flag
    jr z, findWord2 
    call drop                           ; ptr len headptr
    jr findWord3
findWord2:
    inc BC                              ; ptr len headptr namePtr   ; length
    call dup                            ; ptr len headptr namePtr namePtr
    call cat                            ; ptr len headptr namePtr nlen
    call tor                            ; ptr len headptr namePtr r: nlen
    inc BC                              ; ptr len headptr namePtr'  ; first char
    call twoover                        ; ptr len headptr namePtr' ptr len
    call dup                            ; ptr len headptr namePtr' ptr len len
    call rfrom                          ; ptr len headptr namePtr' ptr len len nlen
    call minus                          ; ptr len headptr namePtr' ptr len diff
    call isZero                         ; ptr len headptr namePtr' ptr len
    jr z, findWord2A
    call drop                           ; ptr len headptr namePtr' ptr
    call drop                           ; ptr len headptr namePtr' 
    call drop                           ; ptr len headptr 
    jr findWord3
findWord2A:
    call compareStr                     ; ptr len headptr match     ;match == 0
    call isZero
    jr z,findWord4                          
findWord3:
    call at                             ; ptr len headptr'
    jr findWord1
findWord4:
    jp twonip                           ; headptr

