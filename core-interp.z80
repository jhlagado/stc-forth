repl:
    ld DE, dataStack
    jp interpret

interpret:
    _push $20                       ; str maxlen delim
    call word                       ; c-addr                 
    call dup                        ; c-addr c-addr
    call cat                        ; c-addr len
    call isZero                     ; c-addr
    jr z,interpret2                 
    _fetch state
    call isZero
    jr z,interpret1                 ; c-addr
    call compileWord      
    jr interpret
interpret1:
    call interpWord                 ; num?
    jr interpret
interpret2:
    jp drop                      ; cleanup and return

interpWord:                         ; str len -- num?
    call count                      ; str len
    call twodup                     ; str len str len
    call findx                      ; str len ptrOrNull
    call drop
    call dup                        ; str len ptrOrNull ptrOrNull
    call isZero                     ; str len ptrOrNull
    jr z,interpNum
    _twonip                         ; ptr
interpWord2:
    call getBody                    ; ptr'
    call execute                    ; ?
    ret

interpNum:
    call drop                       ; str len
    call toNumber                   ; num err
    call isZero
    ret z
interpNum2:
    call drop                       ; --
    _printString "NOT FOUND!\r\n"
    ret

compileWord:
    call count                      ; str len
    call twodup                     ; str len str len
    call findx                      ; str len ptrOrNull
    call drop
    call dup                        ; str len ptrOrNull ptrOrNull
    call isZero                     ; str len ptrOrNull
    jr z,compileNum
    _twonip                           ; ptr
    call dup                        ; ptr ptr
    _cellp                          ; ptr pflags
    call cat
    _push IMMED
    call ANDD
    call isZero
    jr nz,interpWord2
    call getBody                    ; ptr'
    call callc                      ; compile call
    ret

compileNum:
    call drop                       ; str len
    call toNumber                   ; num err
    call isZero
    jr z,compileNum2
    jr interpNum2

compileNum2:
    _push dolit
    call callc
    call comma
    ret
    
    