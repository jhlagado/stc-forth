; Modified from code by Grant Searle
; Minimal 6850 ACIA interrupt driven serial I/O

INIT_IO:
    DI   ; Disable interrupts
    LD HL, SERBUF
    LD (serInPtr), HL 
    LD (serRdPtr), HL  
    XOR A
    LD (serBufUsed), A   
    LD A,RTS_LOW
    OUT ($80),A  ; Initialise ACIA
    EI
    RET

SER_INTR:      
    PUSH     AF
    PUSH     HL
    IN       A,($80)
    AND      $01                ; Check if interupt due to read buffer full
    JR       Z,rts0             ; if not, ignore
    IN       A,($81)
    PUSH     AF
    LD       A,(serBufUsed)
    CP       SER_BUFSIZE        ; If full then ignore
    JR       NZ,notFull
    POP      AF
    JR       rts0

notFull:        
    LD       HL,(serInPtr)
    INC      HL
    LD       A,L                ; Only need to check low byte becasuse buffer<256 bytes
    CP       (SERBUF+SER_BUFSIZE) & $FF
    JR       NZ, notWrap
    LD       HL,SERBUF
notWrap:        
    LD       (serInPtr),HL
    POP      AF
    LD       (HL),A
    LD       A,(serBufUsed)
    INC      A
    LD       (serBufUsed),A
    CP       SER_FULLSIZE
    JR       C,rts0
    LD       A,RTS_HIGH
    OUT      ($80),A
rts0:           
    POP      HL
    POP      AF
    LD IY,   NEXT_STEP
    EI
    RETI

RXA:
    PUSH HL
    LD HL,(serRdPtr)
    INC HL
    LD A,L  ; Only need to check low byte becasuse buffer<256 bytes
    CP (SERBUF+SER_BUFSIZE) & $FF
    JR NZ, RXA1
    LD HL,SERBUF
RXA1: 
    DI
    LD (serRdPtr),HL
    LD A,(serBufUsed)
    DEC A
    LD (serBufUsed),A
    CP SER_EMPTYSIZE
    JR NC,RXA2
    LD A,RTS_LOW
    OUT ($80),A
RXA2:
    LD A,(HL)
    EI
    POP HL
    RET   ; Char ready in A

TXA:  
    PUSH AF  ; Store character
TXA1: 
    IN A,($80)  ; Status byte 
    BIT 1,A  ; Set Zero flag if still transmitting character 
    JR Z,TXA1 ; Loop until flag signals ready
    POP AF  ; Retrieve character
    OUT ($81),A  ; Output the character
    RET

QRXA: 
    LD A,(serBufUsed)
    CP $0
    RET